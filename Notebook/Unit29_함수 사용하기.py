# Unit 29. 함수 사용하기


# 29.1 출력 함수 만들기 -----------------------------------------------------------

# 29.1.1  함수 만들기

def hello():  # 함수 생성
    print('hello, world')

# 29.1.2
hello()  # 함수 호출

# 29.1.4 함수의 실행 순서

# 1. 파이썬 스크립트 최초 실행
# 2. hello 함수 호출
# 3. hello 함수 실행
# 4. print 함수 실행 및 'Hello, world!' 출력
# 5. hello 함수 종료
# 6. 파이썬 스크립트 종료


# 29.1.5  함수 작성과 함수 호출 순서

# 함수를 만들고 호출할 때, 함수를 만들기 전에 호출할 수 없다.


# 참고 : 빈 함수 만들기
def hello():
    pass


# 29.2 덧셈 함수 만들기 -------------------------------------------------------------

# 이번에는 함수에 값을 넣어서 동작을 바꿔보자.
# def 함수이름(매개변수1, 매개변수2):
#     코드

# 함수에서 값을 받으려면 ( )(괄호) 안에 변수 이름을 지정해줘여 한다.
# 특히 이 변수를 매개변수(parameter)라고 부른다.

def add(a, b):
    return  a + b

add(2, 3)

# 참고 : 함수 독스트링 사용하기

def add(a, b):
    """
    이 함수는 a와 b를 더한 뒤 결과를 반환하는 함수입니다.
    """
    return  a + b


# 독스트링은 함수의 사용 방법만 기록할 뿐 add(10, 20)으로 함수를 호출해도 출력되지 않습니다.
# 독스트링을 출력하려면 print(add.__doc__)와 같이 함수의 __doc__을 출력하면 됩니다.

# 다음과 같이 help에 함수를 넣으면 함수의 이름, 매개변수, 독스트링을 도움말 형태로 출력해줍니다.
help(add)



# 29.3 함수의 결과를 반환하기 --------------------------------------------------------
x = add(10, 20)

# return을 사용하면 값을 함수 바깥으로 반환할 수 있고,
# 함수에서 나온 값을 변수에 저장할 수 있습니다.
# 즉, return으로 반환하는 값은 반환값이라고 하며
# 함수를 호출해준 바깥에 결과를 알려주기 위해 사용합니다.

# 반환값은 변수에 저장하지 않고 바로 다른 함수에 넣을 수도 있습니다.
# 다음은 print에서 바로 add를 호출하여 결과를 출력합니다.
print(add(10, 20))



# 참고 1 : 매개변수는 없고 반환값만 있는 함수
def one():
    return 1

print(one())


# 참고 2 : return으로 함수 중간에서 빠져나오기

# return은 값을 반환하는 기능뿐만 아니라 함수 중간에서 바로 빠져나오는 기능도 있습니다.

# 다음은 매개변수 a가 10이면 함수를 그냥 빠져나옵니다.

def not_ten(a):
    if a == 10:
        return
    print(a, '입니다', sep='')

not_ten(10)  # 10을 넣을 경우 if 문에서 함수를 빠져나옴. 따라서 print를 출력하지 않음.

# 이처럼 return은 함수 중간에서 빠져나올 때 자주 사용합니다.
# 보통은 if와 조합해서 특정 조건일 때 함수 중간에서 빠져나옵니다.



# 29.4 함수에서 값을 여러 개 반환하기 --------------------------------------------------------

# 이번에는 함수에서 값을 여러 개 반환하는 방법을 알아보겠습니다.
def add_sub(a, b):
    return a +b, a - b

x, y = add_sub(2, 3)  # 함수 출력값(튜플 타입)을 언패킹



# 참고 : 값 여러 개를 직접 반환하기

# 함수에서 값 여러 개를 직접 반환할 때는 다음과 같이 return에 튜플을 지정해주면 됩니다.

def one_two():
    return 1, 2  # return (1, 2)와 같음
one_two()

def one_two():
    return [1, 2]  # 리스트로 직접 반환 가능

one_two()


# 29.3 연습문제 : 몫과 나머지를 구하는 함수 만들기
a = 10
b = 3

def get_quotient_remainder(a, b):
    return a // b, a % b

quotient, remainder = get_quotient_remainder(x, y)
print('몫: {0}, 나머지: {1}'.format(quotient, remainder))


# 29.4 심사문제 : 사칙 연산 함수 만들기

# 표준 입력으로 숫자 두 개가 입력됩니다.
# 다음 소스 코드를 완성하여 두 숫자의 덧셈, 뺄셈, 곱셈, 나눗셈의 결과가
# 출력되게 만드세요. 이때 나눗셈의 결과는 실수라야 합니다.

x, y = map(int, input().split())

def calc(x, y):
    return x + y, x - y, x * y, float(x / y)

a, s, m, d = calc(x, y)
print('덧셈: {0}, 뺄셈: {1}, 곱셈: {2}, 나눗셈: {3}'.format(a, s, m, d))
