# Unit 32. 람다 표현식 사용하기

# 지금까지 def로 함수를 정의해서 사용했습니다.
# 이번에는 람다 표현식으로 익명 함수를 만드는 방법을 알아보겠습니다.


# # 32.1 람다 표현식으로 함수 만들기

# 람다 표현식을 사용하기 전에 먼저 숫자를 받은 뒤
# 10을 더해서 반환하는 함수 plus_ten을 만들어보겠습니다.

def plus_ten(x):
    return  x + 10
plus_ten(1)

# 이 plus_ten 함수를 람다 표현식으로 작성해보겠습니다.
# 람다 표현식은 다음과 같이 lambda에 매개변수를 지정하고
# :(콜론) 뒤에 반환값으로 사용할 식을 지정합니다.

# * lambda 매개변수들: 식

(lambda x: x+10)

# 실행을 해보면 함수 객체가 나오는데,
# 이 상태로는 함수를 호출할 수 없습니다.
# 왜냐하면 람다 표현식은 이름이 없는 함수를 만들기 때문입니다.
#
# 그래서 람다 표현식을 익명 함수(anonymous function)로 부르기도 합니다.

# lambda로 만든 익명함수를 호출하려면 다음과 같이 람다 표현식을 변수에 할당해주면 됩니다.
plus_tex = lambda x: x + 10
plus_tex(2)

# 이제 람다 표현식을 살펴보면 lambda x: x + 10은 매개변수 x 하나를 받고,
# x에 10을 더해서 반환한다는 뜻입니다.
# 즉, 매개변수, 연산자, 값 등을 조합한 식으로 반환값을 만드는 방식입니다.



# 32.1.1  람다 표현식 자체를 호출하기

# 람다 표현식은 변수에 할당하지 않고 람다 표현식 자체를 바로 호출할 수 있습니다.
# 다음과 같이 람다 표현식을 ( )(괄호)로 묶은 뒤에 다시 ( )를 붙이고 인수를 넣어서 호출하면 됩니다.

# * (lambda 매개변수들: 식)(인수들)

(lambda x: x+10)(4)  # 위의 인수자리 값이 x로 들어간다.


# 32.1.2  람다 표현식 안에서는 변수를 만들 수 없다

# 람다 표현식에서 주의할 점은 람다 표현식 안에서는 새 변수를 만들 수 없다는 점입니다.
# 따라서 반환값 부분은 변수 없이 식 한 줄로 표현할 수 있어야 합니다.
# 변수가 필요한 코드일 경우에는 def로 함수를 작성하는 것이 좋습니다.

# (lambda x: y = 10; x + y)(1)

# 단, 람다 표현식 바깥에 있는 변수는 사용할 수 있습니다.
# 다음은 매개변수 x와 람다 표현식 바깥에 있는 변수 y를 더해서 반환합니다.

y = 10
(lambda x: x + y)(1)


# 32.1.3  람다 표현식을 인수로 사용하기

# 람다 표현식을 사용하는 이유는 함수의 인수 부분에서 간단하게 함수를 만들기 위해서 입니다.
# 이런 방식으로 사용하는 대표적인 예가 map입니다.

# 람다 표현식을 사용하기 전에 먼저 def로 함수를 만들어서 map을 사용해보겠습니다.
# 다음과 같이 숫자를 받은 뒤 10을 더해서 반환하는 함수 plus_ten을 작성합니다.
# 그리고 map에 plus_ten 함수와 리스트 [1, 2, 3]을 넣습니다.
# 물론 map의 결과는 map 객체이므로 눈으로 확인할 수 있도록
# list를 사용해서 리스트로 변환해줍니다.

def plus_ten(x):
    return x + 10

list(map(plus_ten, [1, 2, 3]))  # 인수를 list로 받음

# map(f, iterable)은 함수(f)와 반복 가능한(iterable) 자료형을 입력으로 받는다.
# map은 입력받은 자료형의 각 요소를 함수 f가 수행한 결과를 묶어서 돌려주는 함수이다.


# 이제 람다 표현식으로 함수를 만들어서 map에 넣어보겠습니다.
list(map(lambda x: x + 10, [1, 2, 3]))  # 리스트로 출력

# 이처럼 람다 표현식은 함수를 다른 함수의 인수로 넣을 때 매우 편리합니다.


# 참고 : 람다 표현식으로 매개변수가 없는 함수 만들기

# 람다 표현식으로 매개변수가 없는 함수를 만들 때는
# lambda 뒤에 아무것도 지정하지 않고 :(콜론)을 붙입니다.
# 단, 콜론 뒤에는 반드시 반환할 값이 있어야 합니다.

(lambda : 1)()

x = 10
(lambda : x)()




# 32.2 람다 표현식와 map, filter, reduce 함수 활용하기

# 32.2.1  람다 표현식에 조건부 표현식 사용하기
# * lambda 매개변수들: 식1 if 조건식 else 식2

# 다음은 map을 사용하여 리스트 a에서 3의 배수를 문자열로 변환합니다.

a = list(range(1, 11))
list(map(lambda x: str(x) if x % 3 == 0 else x, a))

# 리스트 a에서 3의 배수인 수는 문자열로 바꾸고 아닌 것은 매개변수 x 그대로 둡니다..
# 특히 람다 표현식에서 if를 사용했다면 반드시 else를 사용해야 합니다. 다음과 같이 if만 사용하면 문법 에러가 발생하므로 주의해야 합니다.

# 그리고 람다 표현식 안에서는 elif를 사용할 수 없습니다.
# 따라서 조건부 표현식은 식1 if 조건식1 else 식2 if 조건식2 else 식3 형식처럼
# if를 연속으로 사용해야 합니다.

# * lambda 매개변수들: 식1 if 조건식1 else 식2 if 조건식2 else 식3

# 별로 복잡하지 않은 조건인데도 알아보기가 힘듭니다.
# 이런 경우에는 억지로 람다 표현식을 사용하기 보다는
# 그냥 def로 함수를 만들고 if, elif, else를 사용하는 것을 권장합니다.




# 32.2.2  map에 객체를 여러 개 넣기


# map은 리스트 등의 반복 가능한 객체를 여러 개 넣을 수도 있습니다.
# 다음은 두 리스트의 요소를 곱해서 새 리스트를 만듭니다.

a = list(range(1, 6))
b = list(range(2, 11, 2))

list(map(lambda x, y: x * y, a, b))

# 이렇게 리스트 두 개를 처리할 때는 람다 표현식에서 lambda x, y: x * y처럼
# 매개변수를 두 개로 지정하면 됩니다.
# 그리고 map에 람다 표현식을 넣고 그다음에 리스트 두 개를 콤마로 구분해서 넣어줍니다.
# 즉, 람다 표현식의 매개변수 개수에 맞게 반복 가능한 객체도 콤마로 구분해서 넣어주면 됩니다.



# 32.2.3  filter 사용하기

# 이번에는 filter를 사용해보겠습니다.
# filter는 반복 가능한 객체에서 특정 조건에 맞는 요소만 가져오는데,
# filter에 지정한 함수의 반환값이 True일 때만 해당 요소를 가져옵니다.

# * filter(함수, 반복가능한객체)

# 먼더 def로 함수를 만들어서 filter를 사용해보겠습니다.
# 다음은 리스트에서 5보다 크면서 10보다 작은 숫자를 가져옵니다.

def f(x):
    return x > 5 and x < 10

a = [8, 3, 2, 10, 15, 7, 1, 9, 0, 11]
list(filter(f, a))

# 리스트 a에서 8, 7, 9를 가져왔습니다.
# 즉, filter는 x > 5 and x < 10의 결과가 참인 요소만 가져오고 거짓인 요소는 버립니다.

# 그럼 함수 f를 람다 표현식으로 만들어서 filter에 넣어보겠습니다.

a = [8, 3, 2, 10, 15, 7, 1, 9, 0, 11]
list(filter(lambda x: x > 5 and x < 10, a))


# 32.2.4  reduce 사용하기

#  reduce는 반복 가능한 객체의 각 요소를 지정된 함수로 처리한 뒤
#  이전 결과와 누적해서 반환하는 함수입니다
#  (reduce는 파이썬 3부터 내장 함수가 아닙니다.
#  따라서 functools 모듈에서 reduce 함수를 가져와야 합니다)

# from functools import reduce
# reduce(함수, 반복가능한객체)

def f(x, y):
    return x + y

a = list(range(1, 6))

from functools import reduce
reduce(f, a)

# 이제 함수 f를 람다 표현식으로 만들어서 reduce에 넣어보겠습니다.
reduce(lambda x, y: x + y, a)

a = [8, 3, 2, 10, 15, 7, 1, 9, 0, 11]
print([i for i in a if i > 5 and i < 10])

# 다만, 리스트(딕셔너리, 세트) 표현식으로 처리할 수 있는 경우에는
# map, filter와 람다 표현식 대신 리스트 표현식을 사용하는 것이 좋습니다.



# 32.4 연습문제 : 이미지 파일만 가져오기

# 다음 소스 코드를 완성하여 확장자가
# .jpg, .png인 이미지 파일만 출력되게 만드세요.
# 여기서는 람다 표현식을 사용해야 하며 출력 결과는 리스트 형태라야 합니다.
# 람다 표현식에서 확장자를 검사할 때는 문자열 메서드를 활용하세요.

files = ['font', '1.png', '10.jpg', '11.gif', '2.jpg', '3.png', 'table.xslx', 'spec.docx']

list(filter(lambda x: '.png' in x or '.jpg' in x, files))



# 32.5 심사문제 : 파일 이름을 한꺼번에 바꾸기

# 표준 입력으로 숫자.확장자 형식으로 된 파일 이름 여러 개가 입력됩니다.
# 다음 소스 코드를 완성하여 파일 이름이 숫자 3개이면서
# 앞에 0이 들어가는 형식으로 출력되게 만드세요.

# 예를 들어 1.png는 001.png, 99.docx는 099.docx, 100.xlsx는 100.xlsx처럼 출력되어야 합니다.
# 그리고 람다 표현식을 사용해야 하며 출력 결과는 리스트 형태라야 합니다.
# 람다 표현식에서 파일명을 처리할 때는 문자열 포매팅과 문자열 메서드를 활용하세요.

files = input().split()

# 답안 1
list(map(lambda x: '{0:0>7}'.format(x) if '.png' in x or '.jpg' in x else '{0:0>8}'.format(x), files))
# 매개변수 x 안에 '.png' 또는 '.jpg'가 있으면 7자리로 포메팅, 아니면 8자리로 포메팅, 빈칸은 0으로 채우고 오른쪽 정렬

# 답안 2
list(map(lambda x: '{0:03d}.{1}'.format(int(x.split('.')[0]), x.split('.')[1]), files))
# 매개변수 x를 '.'를 기준으로 나눈 후, {0}에는 숫자 3자리, 나머지 자리는 0으로 채움, {1}에는 파일 확장자 명으로 포메팅



