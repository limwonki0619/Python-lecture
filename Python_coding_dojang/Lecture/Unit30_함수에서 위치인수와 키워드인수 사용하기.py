# Unit 30. 함수에서 위치 인수와 키워드 인수 사용하기

# 이번에는 함수에서 위치 인수, 키워드 인수를 사용하는 방법과 리스트,
# 딕셔너리 언패킹(unpacking)을 활용하는 방법을 알아보겠습니다.


# 30.1 위치 인수와 리스트 언패킹 사용하기 -------------------------------

# 다음과 같이 함수에 인수를 순서대로 넣는 방식을
# 위치 인수(positional argument)라고 합니다. 즉, 인수의 위치가 정해져 있습니다.

print(10, 20, 30)


# 30.1.1  위치 인수를 사용하는 함수를 만들고 호출하기

def print_numbers(a, b, c):
    print(a)
    print(b)
    print(c)

# 30.1.2  언패킹 사용하기

# 이렇게 인수를 순서대로 넣을 때는 리스트나 튜플을 사용할 수도 있습니다.
# 다음과 같이 리스트 또는 튜플 앞에 *(애스터리스크)를 붙여서 함수에 넣어주면 됩니다.

# * 함수(*리스트)
# * 함수(*튜플)
x = [10, 20, 30]
print_numbers(*x)



# 30.1.3  가변 인수 함수 만들기

# 위치 인수와 리스트 언패킹은 어디에 사용할까요?
# 이 기능들은 인수의 개수가 정해지지 않은 가변 인수(variable argument)에 사용합니다.
# 즉, 같은 함수에 인수 한 개를 넣을 수도 있고, 열 개를 넣을 수도 있습니다. 또는, 인수를 넣지 않을 수도 있습니다.

# def 함수이름(*매개변수):
#     코드

def print_numbers(*args):
    for arg in args:
        print(arg)

print_numbers(10, 20, 30, 40)

# 매개변수 이름은 원하는 대로 지어도 되지만 관례적으로 arguments를 줄여서
# args로 사용합니다. 특히 이 args는 튜플이라서 for로 반복할 수 있습니다.

y = [100, 200, 300, 400]
print(y)           # 리스트로 출력
print(*y)          # 리스트 언패킹
print_numbers(y)   # 리스트로 출력
print_numbers(*y)  # 리스트 언패킹


# 참고 : 고정인수와 가변인수를 함께 사용하기
def print_numbers(a, *args):  # 매개변수 순서에서 *args는 반드시 가장 뒤쪽에 와야 합니다.
    print(a)
    print(args)

print_numbers(1)
print_numbers(1, 10, 20)




# 30.2 키워드 인수 사용하기 -------------------------------------------

# 지금까지 함수에 인수를 넣을 때 값이나 변수를 그대로 넣었습니다.
# 그러다 보니 각각의 인수가 무슨 용도인지 알기가 어려웠습니다.
# 보통은 함수의 사용 방법을 익힐 때 인수의 순서와 용도를 함께 외웁니다.
#
# 예를 들어 개인 정보를 출력하는 함수를 만들어보겠습니다.

def personal_info(name, age, address):
    print('이름: ', name)
    print('나이: ', age)
    print('주소: ', address)

personal_info('홍길동', 30, '서울시 용산구 이촌동')

# 이 함수를 사용할 때는 첫 번째 인수에 이름(name),
# 두 번째 인수에 나이( age), 세 번째 인수에 주소(address)를 넣어야 합니다.
# 만약 인수의 순서가 달라지면 잘못된 결과가 출력되겠죠?

# 이처럼 인수의 순서와 용도를 모두 기억해야 해서 불편합니다.
# 그래서 파이썬에서는 인수의 순서와 용도를 매번 기억하지 않도록
# 키워드 인수(keyword argument)라는 기능을 제공합니다.
# 키워드 인수는 말 그대로 인수에 이름(키워드)을 붙이는 기능인데
# 키워드=값 형식으로 사용합니다.

# 그럼 personal_info 함수를 키워드 인수 방식으로 호출해보겠습니다.

personal_info(age=30, name='홍길동', address='서울시 용산구 이촌동')

# 워드 인수를 사용하니 함수를 호출할 때 인수의 용도가 명확하게 보입니다.
# 특히 키워드 인수를 사용하면 인수의 순서를 맞추지 않아도 키워드에 해당하는 값이 들어갑니다.



# 30.3 키워드 인수와 딕셔너리 언패킹 사용하기 ---------------------------------------------------------

# 이번에는 딕셔너리를 사용해서 키워드 인수로 값을 넣는 딕셔너리 언패킹을 사용해보겠습니다.
# 다음과 같이 딕셔너리 앞에 **(애스터리스크 두 개)를 붙여서 함수에 넣어줍니다.

def personal_info(name, age, address):
    print('이름: ', name)
    print('나이: ', age)
    print('주소: ', address)

x = {'name': '홍길동', 'age': 30, 'address': '서울시 용산구 이촌동'}
personal_info(*x)   # key만 출력
personal_info(**x)  # key, value가 출력


# 만약 이름과 개수가 다르면 함수를 호출할 수 없습니다.
# 여기서는 함수를 def personal_info(name, age, address):로 만들었으므로
# 딕셔너리도 똑같이 맞춰주어야 합니다.
#
# 다음과 같이 매개변수 이름, 개수가 다른 딕셔너리를 넣으면 에러가 발생합니다.

#  personal_info(name, age, address)
#  personal_info(**{'name': '홍길동', 'old': 30, 'address':'서울시 용산구 이촌동'})



# 30.3.1  **를 두 번 사용하는 이유

# 딕셔너리는 **처럼 *를 두 번 사용할까요?
# 왜냐하면 딕셔너리는 키-값 쌍 형태로 값이 저장되어 있기 때문입니다.
# 먼저 *를 한 번만 사용해서 함수를 호출해봅니다.

# personal_info에 *x를 넣으면 x의 키가 출력됩니다.
# 즉, 딕셔너리를 한 번 언패킹하면 키를 사용한다는 뜻이 됩니다.
# 따라서 **처럼 딕셔너리를 두 번 언패킹하여 값을 사용하도록 만들어야 합니다.





# 30.3.2  키워드 인수를 사용하는 가변 인수 함수 만들기

# 이번에는 키워드 인수를 사용하는 가변 인수 함수를 만들어보겠습니다.
# 다음과 같이 키워드 인수를 사용하는 가변 인수 함수는 매개변수 앞에 **를 붙여서 만듭니다.

# def 함수이름(**매개변수):
#     코드


def personal_info(**kwargs):        # kwargs : 가변인수
    for kw, arg in kwargs.items():  # kwarhs :  keyword arguments
        print(kw, ': ', arg, sep='')

x = {'name': '홍길동', 'age': 30, 'address': '서울시 용산구 이촌동'}
personal_info(**x)


# 보통 **kwargs를 사용한 가변 인수 함수는 다음과 같이 함수 안에서 특정 키가 있는지 확인한 뒤 해당 기능을 만듭니다.

def personal_info(**kwargs):
    if 'name' in kwargs:    # in으로 딕셔너리 안에 특정 키가 있는지 확인
        print('이름: ', kwargs['name'])
    if 'age' in kwargs:
        print('나이: ', kwargs['age'])
    if 'address' in kwargs:
        print('주소: ', kwargs['address'])



# 30.4 매개변수에 초깃값(default) 지정하기

# 지금까지 함수를 호출할 때 항상 인수를 넣어서 값을 전달했습니다.
# 그러면 인수를 생략할 수는 없을까요? 이때는 함수의 매개변수에 초깃값을 지정하면 됩니다. 초깃값은 다음과 같이 함수를 만들 때 매개변수=값 형식으로 지정합니다.

# 이제 personal_info 함수에서 매개변수 address의 초깃값을 '비공개'로 지정해보겠습니다.

def personal_info(name, age, address='비공개'):
    print('이름: ', name)
    print('나이: ', age)
    print('주소: ', address)

personal_info('홍길동', 30)

# 매개변수에 초깃값이 지정되어 있더라도 값을 넣으면 해당 값이 전달됩니다.

personal_info('홍길동', 30, '서울시 용산구 이촌동')


# 30.4.1  초깃값이 지정된 매개변수의 위치

# 매개변수의 초깃값을 지정할 때 한 가지 주의할 점이 있습니다.
# 초깃값이 지정된 매개변수 다음에는 초깃값이 없는 매개변수가 올 수 없습니다.

# 즉, 다음과 같이 초깃값이 지정된 매개변수는 뒤쪽에 몰아주면 됩니다.
#

# def personal_info(name, age, address='비공개'):
# def personal_info(name, age=0, address='비공개'):
# def personal_info(name='비공개', age=0, address='비공개'):

# 참고로 def personal_info(name='비공개', age=0, address='비공개'):와 같이 모든 매개변수에 초깃값을 지정하면 personal_info()처럼 인수를 넣지 않고 호출할 수 있습니다.

# 여기서는 *를 리스트에 사용하고, **를 딕셔너리에 사용한다는 점만 기억하면 됩니다.







