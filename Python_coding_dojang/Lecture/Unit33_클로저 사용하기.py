# Unit 33. 클로저 사용하기

# 33.1 변수의 사용 범위 알아보기

# 파이썬 스크립트에서 변수를 만들면 다음과 같이 함수 안에서도 사용할 수 있습니다.

x = 10           # 전역변수
def foo():
    print(x)     # 전역변수 출력

foo()
print(x)         # 전역변수 출력


# foo 함수에서 함수 바깥에 있는 변수 x의 값을 출력했습니다.
# 물론 함수 바깥에서도 x의 값을 출력할 수 있습니다.
# 이처럼 함수를 포함하여 스크립트 전체에서 접근할 수 있는 변수를
# 전역 변수(global variable)라고 부릅니다.
# 특히 전역 변수에 접근할 수 있는 범위를 전역 범위(global scope)라고 합니다.

# 그럼 변수 x를 함수 foo 안에서 만들면 어떻게 될까요?

def foo():
    x = 10  # foo의 지역 변수
    print(x)  # foo의 지역 변수 출력


foo()
print(x)  # 에러. foo의 지역 변수는 출력할 수 없음

# 실행을 해보면 x가 정의되지 않았다는 에러가 발생합니다.
# 왜냐하면 변수 x는 함수 foo 안에서 만들었기 때문에 foo의 지역 변수(local variable)입니다.
# 따라서 지역 변수는 변수를 만든 함수 안에서만 접근할 수 있고, 함수 바깥에서는 접근할 수 없습니다.
# 특히 지역 변수를 접근할 수 있는 범위를 지역 범위(local scope)라고 합니다.


# 33.1.1  함수 안에서 전역 변수 변경하기

# 만약 함수 안에서 전역 변수의 값을 변경하면 어떻게 될까요?

x = 10       # 전역변수
def foo():
    x = 20   # x는 foo의 지역변수
    print(x) # foo의 지역변수 출력

foo()
print(x)     # 전역 변수 출력

# 분명 함수 foo 안에서 x = 20처럼 x의 값을 20으로 변경했습니다.
# 하지만 함수 바깥에서 print로 x의 값을 출력해보면 10이 나옵니다.
# 겉으로 보기에는 foo 안의 x는 전역 변수인 것 같지만 실제로는 foo의 지역 변수입니다.
# 즉, 전역 변수 x가 있고, foo에서 지역 변수 x를 새로 만들게 됩니다.
# 이 둘은 이름만 같을 뿐 서로 다른 변수입니다.

# 함수 안에서 전역 변수의 값을 변경하려면 global 키워드를 사용해야 합니다.
# 다음과 같이 함수 안에서 global에 전역 변수의 이름을 지정해줍니다.

x = 10        # 전역변수
def foo():
    global x  # 전역 변수 x를 사용하겠다고 설정
    x = 20    # x는 전역 변수
    print(x)  # 전역 변수 출력

foo()
print(x)      # 전역 변수 출력

# 이렇게 함수 안에서 변수를 global로 지정하면 전역 변수를 사용하게 됩니다.


# 만약 전역 변수가 없을 때 함수 안에서 global을 사용하면 해당 변수는 전역 변수가 됩니다.

# 전역 변수 x가 없는 상태
def foo():
    global x   # x를 전역 변수로 만듦
    x = 20     # x는 전역변수
    print(x)   # 전역 변수 출력

foo()
print(x)       # 전역 변수 출력

# ※ 주의 사항 ------------------------------------------------------------------------
#   1. 가급적 local 변수를 사용해라
#   2. global 변수 값을 변경하지 말 것



# 참고 : 네임스페이스

# 파이썬에서 변수는 네임스페이스(namespace, 이름공간)에 저장됩니다.
# 다음과 같이 locals 함수를 사용하면 현재 네임스페이스를 딕셔너리 형태로 출력할 수 있습니다.

locals()  # 전역 네임스페이스

def foo():
    x = 10
    print(locals())  # 지역 범위에서 네임스페이스를 출력했으므로 지역 네임스페이스를 가져옴 {dict 형태}
foo()




# 33.2 함수 안에서 함수 만들기 ---------------------------------------------------------

# 이번에는 함수 안에서 함수를 만드는 방법을 알아보겠습니다.
# 다음과 같이 def로 함수를 만들고 그 안에서 다시 def로 함수를 만들면 됩니다.

# def 함수이름1():
#     코드
#     def 함수이름2():
#         코드

def print_hello():
    hello = 'Hello, world!'

    def print_message():
        print(hello)  # 바깥쪽 함수의 지역 변수를 사용

    print_message()

print_hello()

# 33.2.1  지역 변수의 범위

# 안쪽 함수 print_message에서는
# 바깥쪽 함수 print_hello의 지역 변수 hello를 사용할 수 있습니다.
# 즉, 바깥쪽 함수의 지역 변수는 그 안에 속한 모든 함수에서 접근할 수 있습니다.



# 33.2.2  지역 변수 변경하기
# 그럼 바깥쪽 함수의 지역 변수를 안쪽 함수에서 변경하면 어떻게 될까요?
# 다음과 같이 안쪽 함수 B에서 바깥쪽 함수 A의 지역 변수 x를 변경해봅니다.

def A():
    x = 10  # A의 지역 변수 x
    def B():
        x = 20  # x에 20 할당, but B의 지역 변수 x를 새로 만듦
    B()
    print(x)  # A의 지역 변수 x 출력

A()

# 실행을 해보면 20이 나와야 할 것 같은데 10이 나왔습니다.
# 왜냐하면 겉으로 보기에는 바깥쪽 함수 A의 지역 변수 x를 변경하는 것 같지만,
# 실제로는 안쪽 함수 B에서 이름이 같은 지역 변수 x를 새로 만들게 됩니다.
# 즉, 파이썬에서는 함수에서 변수를 만들면 항상 현재 함수의 지역 변수가 됩니다.

# 현재 함수의 바깥쪽에 있는 지역 변수의 값을 변경하려면 nonlocal 키워드를 사용해야 합니다. 다음과 같이 함수 안에서 nonlocal에 지역 변수의 이름을 지정해줍니다.
# * nonlocal 지역변수

def A():
    x = 10          # A의 지역 변수 x
    def B():
        nonlocal x  # 현재 함수의 바깥쪽에 있는 지역 변수 사용
        x = 20      # A의 지역 변수 x에 20 할당
    B()
    print(x)        # A의 지역 변수 x 출력

A()


# 이제 함수 B에서 함수 A의 지역 변수 x를 변경할 수 있습니다.
# 즉, nonlocal은 현재 함수의 지역 변수가 아니라는 뜻이며 바깥쪽 함수의 지역 변수를 사용합니다.


# 33.2.3  nonlocal이 변수를 찾는 순서

# nonlocal은 현재 함수의 바깥쪽에 있는 지역 변수를 찾을 때
# 가장 가까운 함수부터 먼저 찾습니다. 이번에는 함수의 단계를 A, B, C로 만들었습니다.

def A():
    x = 10
    y = 100
    def B():
        x = 20
        def C():
            nonlocal x
            nonlocal y
            x = x + 30
            y = y + 300
            print(x)
            print(y)
        C()
    B()
A()

# 가까운 함수부터 지역 변수를 찾고, 지역 변수가 없으면 계속 바깥쪽으로 나가서 찾습니다.
# 실무에서는 이렇게 여러 단계로 함수를 만들 일은 거의 없습니다.
# 그리고 함수마다 이름이 같은 변수를 사용하기 보다는 변수 이름을 다르게 짓는 것이 좋습니다.


