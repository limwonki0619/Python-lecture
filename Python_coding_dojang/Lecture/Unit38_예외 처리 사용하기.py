# Unit 38. 예외 처리 사용하기

# 예외(exception)란 코드를 실행하는 중에 발생한 에러를 뜻합니다.
# 다음과 같이 10을 어떤 값으로 나누는 함수 ten_div가 있을 때
# 인수에 따라 정상으로 동작하기도 하고 에러가 나기도 합니다.


def ten_div(x):
    return 10 / x

ten_div(2)
ten_div(0)

# 하지만 0을 넣으면 실행하는 중에 에러가 발생합니다.
# 이런 상황을 예외라고 하는데 여기서는 어떤 숫자를 0으로 나누어서
# ZeroDivisionError 예외가 발생했습니다.

# ZeroDivisionError뿐만 아니라 지금까지 만난
# AttributeError, NameError, TypeError 등 다양한 에러들도 모두 예외입니다.



# 38.1 try except로 사용하기 --------------------------------------------------------------

# 예외 처리를 하려면 다음과 같이 try에 실행할 코드를 넣고
# except에 예외가 발생했을 때 처리하는 코드를 넣습니다.

# try:
#     실행할 코드
# except:
#     예외가 발생했을 때 처리하는 코드

# 이제 숫자를 0으로 나누었을 때 발생하는 예외를 처리해보겠습니다.

try:
    x = int(input('나눌 숫자를 입력하세요:'))
    y = 10 / x
    print(y)
except:  # 예외게 발생했을 때 실행됨
    print('예외가 발생했습니다.')

# 예외가 발생하면 해당 줄에서 코드 실행을 중단하고 바로 except로 가서 코드를 실행합니다.
# 즉, try의 y = 10 / x를 비롯하여 그 아래줄에 있는 print(y)도 실행되지 않습니다.



# 38.1.1  특정 예외만 처리하기

# 이번에는 except에 예외 이름을 지정해서 특정 예외가 발생했을 때만
# 처리 코드를 실행하도록 만들어보겠습니다.

# try:
#     실행할 코드
# except 예외이름:
#     예외가 발생했을 때 처리하는 코드


# 다음과 같이 정수 두 개를 입력받아서 하나는 리스트의 인덱스로 사용하고,
# 하나는 나누는 값으로 사용합니다.
# 그리고 except를 두 개 사용하고 각각 ZeroDivisionError와 IndexError를 지정합니다.

y = [10, 20, 30]

try:
    index, x = map(int, input('인덱스와 나눌 숫자를 입력하세요: ').split())
    print(y[index] / x)
except ZeroDivisionError:
    print('숫자를 0으로 나눌 수 없습니다.')
except IndexError:
    print('잘못된 인덱스입니다.')



# 38.1.2  예외의 에러 메시지 받아오기

# 특히 except에서 as 뒤에 변수를 지정하면 발생한 예외의 에러 메시지를 받아올 수 있습니다.

# try:
#     실행할 코드
# except 예외 as 변수:
#     예외가 발생했을 때 처리하는 코드

y = [10, 20, 30]

try:
    index, x = map(int, input('인덱스와 나눌 숫자를 입력하세요: ').split())
    print(y[index] / x)
except ZeroDivisionError as e:  # as 뒤에 변수를 지정하면 에러를 받아옴
    print('숫자를 0으로 나눌 수 없습니다.', e)  # e에 저장된 에러 메시지 출력
except IndexError as e:
    print('잘못된 인덱스입니다.', e)

# 예외 처리는 에러가 발생하더라도 스크립트의 실행을 중단시키지 않고 계속 실행하고자 할 때 사용합니다.
# 단, 예외가 여러 개 발생하더라도
# 먼저 발생한 예외의 처리 코드만 실행됩니다
# (또는, 예외 중에서 높은 계층의 예외부터 처리됩니다. 기반 클래스 > 파생 클래스 순).



# 참고 :  예외 계층

# 예외도 클래스 상속으로 구현되며 다음과 같은 계층으로 이루어져 있습니다.
# 보통 파이썬에서 새로운 예외를 만들 때는 Exception을 상속받아서 구현합니다.






# 38.2 else와 finally 사용하기 -----------------------------------------------------------

# 이번에는 예외가 발생하지 않았을 때 코드를 실행하는 else를 사용해보겠습니다.
# 다음과 같이 else는 except 바로 다음에 와야 하며 except를 생략할 수 없습니다.

try:
    x = int(input('나눌 숫자를 입력하세요: '))
    y = 10 / x
except ZeroDivisionError:    # 숫자를 0으로 나눠서 에러가 발생했을 때 실행됨
    print('숫자를 0으로 나눌 수 없습니다.')
else:                        # try의 코드에서 예외가 발생하지 않았을 때 실행됨
    print(y)


try:
    x = int(input('나눌 숫자를 입력하세요: '))
    y = 10 / x
    print(y)                 # else는 없어도 사용이 가능
except ZeroDivisionError:    # 숫자를 0으로 나눠서 에러가 발생했을 때 실행됨
    print('숫자를 0으로 나눌 수 없습니다.')


# 38.2.1  예외와는 상관없이 항상 코드 실행하기

# try:
#     실행할 코드
# except:
#     예외가 발생했을 때 처리하는 코드
# else:
#     예외가 발생하지 않았을 때 실행할 코드
# finally:
#     예외 발생 여부와 상관없이 항상 실행할 코드

try:
    x = int(input('나눌 숫자를 입력하세요: '))
    y = 10 / x
except ZeroDivisionError:    # 숫자를 0으로 나눠서 에러가 발생했을 때 실행됨
    print('숫자를 0으로 나눌 수 없습니다.')
else:                        # try의 코드에서 예외가 발생하지 않았을 때 실행됨
    print(y)
finally:                     # 예외 발생 여부와 상관없이 항상 실행됨
    print('코드 실행이 끝났습니다.')





# 38.3 예외 발생 시키기

# 지금까지 숫자를 0으로 나눴을 때
# 에러, 리스트의 범위를 벗어난 인덱스에 접근했을 때 에러 등
# 파이썬에서 정해진 예외만 처리했습니다. 이번에는 우리가 직접 예외를 발생시켜 보겠습니다.

# 예외를 발생시킬 때는 raise에 예외를 지정하고 에러 메시지를 넣습니다
# (에러 메시지는 생략 할 수 있음).

try:
    x = int(input('3의 배수를 입력하세요: '))
    if x % 3 != 0:                                 # x가 3의 배수가 아니면
        raise Exception('3의 배수가 아닙니다.')    # 예외를 발생시킴
    print(x)
except Exception as e:                             # 예외가 발생했을 때 실행됨
    print('예외가 발생했습니다.', e)




