# Unit 26. 세트 사용하기

# 파이썬은 집합을 표현하는 세트(set)라는 자료형을 제공합니다.
# 집합을 영어로 하면 세트인데 수학에서 배우는 그 집합이 맞습니다.
# 따라서 세트는 합집합, 교집합, 차집합 등의 연산이 가능합니다.

# 이번 유닛에서는 세트를 만드는 방법과 세트 메서드 사용 방법을 알아보겠습니다.


# 26.1 세트 만들기 -----------------------------------------------------------------

# 세트는 { }(중괄호) 안에 값을 저장하며 각 값은 ,(콤마)로 구분해줍니다.
#
# 세트 = {값1, 값2, 값3}
# 간단하게 과일이 들어있는 세트를 만들어보겠습니다.

fruits = {'strawberry', 'grape', 'orange', 'pineapple', 'cherry'}
print(fruits)

fruits = {'orange', 'orange', 'cherry'}
print(fruits)  # 세트에 들어가는 요소는 중복될 수 없다.

# 특히 세트는 리스트, 튜플, 딕셔너리와는 달리
# [ ](대괄호)로 특정 요소만 출력할 수는 없습니다.
print(fruits[0])

# 26.1.1  세트에 특정 값이 있는지 확인하기

fruits = {'strawberry', 'grape', 'orange', 'pineapple', 'cherry'}
print('orange' in fruits)

# 트에 특정 값이 있으면 True, 없으면 False가 나옵니다.
# 세트 fruits에 'orange'가 있으므로 True, 'peach'가 없으므로 False가 나왔습니다.
# 반대로 in 앞에 not을 붙이면 특정 값이 없는지 확인합니다.
print('peach' not in fruits)
print('orange' not in fruits)

# 26.1.2  set를 사용하여 세트 만들기
# set(반복가능한객체)

a = set('apple')
print(a)  # 유일한 문자만 세트로 만들어진다.

b = set(range(5))
print(b)

c = set()  # 빈 세트 만들기

# 단, 세트가 { }를 사용한다고 해서 c = {}와 같이 만들면 빈 딕셔너리가 만들어지므로
# 주의해야 합니다. 다음과 같이 type을 사용하면 자료형의 종류를 알 수 있습니다.

c = {}  # 딕셔너리 우선
type(c)

# 참고 1 : 한글 문자열을 세트로 만들기
set('안녕하세요')

# 참고 2 : 세트는 리스트, 딕셔너리와 달리 세트 안에 세트를 넣을 수 없습니다.
a = {{1, 2}, {3, 4}}

# 참고 3 : 프로즌 세트
# 파이썬은 내용을 변경할 수 없는 세트도 제공합니다.
a = frozenset(range(10))
print(a)

#  frozenset는 뒤에서 설명할 집합 연산과 메서드에서
#  요소를 추가하거나 삭제하는 연산, 메서드는 사용할 수 없습니다.
#  즉, 다음과 같이 frozenset의 요소를 변경하려고 하면 에러가 발생합니다.

# 그런데 요소를 변경할 수 없는 frozenset는 왜 사용할까요?
# frozenset는 세트 안에 세트를 넣고 싶을 때 사용합니다.
# 다음과 같이 frozenset는 frozenset를 중첩해서 넣을 수 있습니다.
# 단, frozenset만 넣을 수 있고, 일반 set는 넣을 수 없습니다.

print(frozenset({frozenset({1, 2}), frozenset({3, 4})}))



# 26.2 집함 연산 사용하기 -------------------------------------------------

# 합집합
# '|' 연산자는 합집합(union)을 구하며 OR 연산자 |를 사용합니다.
# set.union 메서드와 동작이 같습니다.
# * 세트 1 | 세트 2
# se.union(세트1, 세트2)

# 합짐합 : Union
# 교집함 : Intersection
# 차집함 : Difference

a = {1, 2, 3, 4}
b = {3, 4, 5, 6}

print(a | b)
print(set.union(a, b))
a |= {5}
print(a)

# 교집합
# '&' 연산자는 교집합(intersection)을 구하며 AND 연산자 &를 사용합니다.
# set.intersection 메서드와 동작이 같습니다.

print(a & b)
print(set.intersection(a, b))

# 차집합
# '-' 연산자는 차집합(difference)을 구하며 뺄셈 연산자 -를 사용합니다.
# set.difference 메서드와 동작이 같습니다.

print(a - b)
set.difference(a, b)

# 대칭차집합
# '^'연산자는 대칭차집합(symmetric difference)을 구하며 XOR 연산자 ^를 사용합니다.
# set.symmetric_difference 메서드와 동작이 같습니다.

# 대칭차집합은 XOR 연산자의 특성을 그대로 따르는데 XOR은 서로 다르면 참입니다.
# 따라서 집합에서는 두 집합 중 겹치지 않는 요소만 포함합니다.

print(a ^ b)
set.symmetric_difference(a, b)


# 26.2.1  집합 연산 후 할당 연산자 사용하기
print(a)


# 26.2.2  부분 집합과 상위집합 확인하기

# 세트는 부분집합, 진부분집합, 상위집합, 진상위집합과 같이 속하는 관계를 표현할 수도 있습니다.
# 현재 세트가 다른 세트의 (진)부분집합 또는
# (진)상위집합인지 확인할 때는 세트 자료형에 부등호와 등호 사용합니다.

# 현재세트 <= 다른세트
# 현재세트.issubset(다른세트)

a = {1, 2, 3, 4}
print(a <= {1, 2, 3, 4})
a.issubset({1, 2, 3, 4, 5})

# <은 현재 세트가 다른 세트의 진부분집합(proper subset)인지 확인하며
# 메서드는 없습니다.

# 현재세트 < 다른세트

print(a < {1, 2, 3, 4, 5})

# >=은 현재 세트가 다른 세트의 상위집합(superset)인지 확인하며 issuperset 메서드와 같습니다.

# 현재세트 >= 다른세트
# 현재세트.issuperset(다른세트)

print(a >= {1, 2, 3, 4})


# >은 현재 세트가 다른 세트의 진상위집합(proper superset)인지 확인하며
# 메서드는 없습니다.
print(a > {1, 2, 3})



# 26.2.3  세트가 같은지 다른지 확인하기

# 세트는 == 연산자를 사용하여 서로 같은지 확인할 수 있습니다.
a = {1, 2, 3, 4}
print(a == {1, 2, 3, 4})
print(a != {1, 2, 3})


# 26.2.4  세트가 겹치지 않는지 확인하기
# disjoint는 현재 세트가 다른 세트와 겹치지 않는지 확인합니다.
# 겹치는 요소가 없으면 True, 있으면 False입니다.




# 26.3 세트 조작하기 -------------------------------------------------------------

# 26.3.1  세트에 요소 추가하기
# add(요소)는 세트에 요소를 추가합니다.

a = {1, 2, 3, 4}
a.add(5)
print(a)

# 26.3.2  세트에서 특정 요소를 삭제하기
a.remove(3)
print(a)

# 26.3.3  세트에서 임의의 요소 삭제하기
a.pop()
print(a)

# 26.3.4  세트의 모든 요소를 삭제하기
# clear()는 세트에서 모든 요소를 삭제합니다.
a.clear()
print(a)

# 26.3.5  세트의 요소 개수 구하기
# 지금까지 리스트, 튜플, 문자열, range, 딕셔너리의 요소 개수를 구할 때
# len 함수를 사용했죠?

# 마찬가지로 len(세트)는 세트의 요소 개수(길이)를 구합니다
a = {1, 2, 3, 4}
print(len(a))



# 26.4 세트의 할당과 복사 --------------------------------------------------------
a = {1, 2, 3, 4}

# b = a와 같이 세트를 다른 변수에 할당하면 세트는 두 개가 될 것 같지만
# 실제로는 세트가 한 개입니다.

# 세트 a와 b를 완전히 두 개로 만들려면 copy 메서드로 모든 요소를 복사해야 합니다.
b = a.copy()

print(a is b)


# 26.5 반복문으로 세트의 요소를 모두 출력하기
a = {1, 2, 3, 4}

for i in a:
    print(i)


# 26.6 세트 표현식 사용하기

# * {식 for 변수 in 반복가능한객체}
# * set(식 for 변수 in 반복가능한객체)

a = {i for i in 'apple'}
print(a)


# 26.6.1  세트 표현식에 if 조건문 사용하기

# * {식 for 변수 in 세트 if 조건식}
# * set(식 for 변수 in 세트 if 조건식)

a = {i for i in 'pineapple' if i not in 'apl'}  # 중복 제외, 'a', 'p', 'l' 제외하고 나머지 출력
print(a)

# 'pineapple'에서 'a', 'p', 'l'을 제외한 문자들로 세트를 생성합니다.
# 즉, 다음과 같이 for 반복문 뒤에 if 조건문을 지정하면 if 조건문에서
# 특정 요소를 제외한 뒤 세트를 생성합니다.

