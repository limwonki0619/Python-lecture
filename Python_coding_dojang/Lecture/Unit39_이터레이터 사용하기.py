# Unit 39. 이터레이터 사용하기

# 이터레이터(iterator)는 값을 차례대로 꺼낼 수 있는 객체(object)입니다



# 39.1 반복 가능한 객체 알아보기 ------------------------------------------------------------

# 이터레이터를 만들기 전에 먼저 반복 가능한 객체(iterable)에 대해 알아보겠습니다.
# 반복 가능한 객체는 말 그대로 반복할 수 있는 객체인데
# 우리가 흔히 사용하는 문자열, 리스트, 딕셔너리, 세트가 반복 가능한 객체입니다.
# 즉, 요소가 여러 개 들어있고, 한 번에 하나씩 꺼낼 수 있는 객체입니다.


# 객체가 반복 가능한 객체인지 알아보는 방법은
# 객체에 __iter__ 메서드가 들어있는지 확인해보면 됩니다.
#
# 다음과 같이 dir 함수를 사용하면 객체의 메서드를 확인할 수 있습니다.

dir([1, 2, 3])

# 리스트 [1, 2, 3]을 dir로 살펴보면 __iter__ 메서드가 들어있습니다.
# 이 리스트에서 __iter__를 호출해보면 이터레이터가 나옵니다.

it = [1, 2, 3].__iter__()
it.__next__()

# it에서 __next__를 호출할 때마다 리스트에 들어있는 1, 2, 3이 나옵니다.
# 그리고 3 다음에 __next__를 호출하면 StopIteration 예외가 발생합니다.
# 즉, [1, 2, 3]이므로 1, 2, 3 세 번 반복합니다.

# 이처럼 이터레이터는 __next__로 요소를 계속 꺼내다가
# 꺼낼 요소가 없으면 StopIteration 예외를 발생시켜서 반복을 끝냅니다.

a = [1, 2, 3]
a.__len__()



# 39.1.1  for와 반복 가능한 객체

# 이제 for에 반복 가능한 객체를 사용했을 때 동작 과정을 알아보겠습니다.
# 다음과 같이 for에 range(3)을 사용했다면 먼저
# range에서 __iter__로 이터레이터를 얻습니다.
# 그리고 한 번 반복할 때마다 이터레이터에서 __next__로 숫자를 꺼내서 i에 저장하고,
# 지정된 숫자 3이 되면 StopIteration을 발생시켜서 반복을 끝냅니다.



# 정리하자면 반복 가능한 객체는 요소를 한 번에 하나씩 가져올 수 있는 객체이고,
# 이터레이터는 __next__ 메서드를 사용해서 차례대로 값을 꺼낼 수 있는 객체입니다.
# 반복 가능한 객체(iterable)와 이터레이터(iterator)는 별개의 객체이므로 둘은 구분해야 합니다.

# 즉, 반복 가능한 객체에서 __iter__ 메서드로 이터레이터를 얻습니다.


