# Unit 22. 리스트와 튜플 응용하기

# 22.1 리스트 조작하기 ----------------------------------------------------------

# 22.1.1 리스트에 요소 추가하기

# 리스트의 대표적인 기능이 바로 요소 추가입니다. 다음과 같이 리스트에 요소를 추가하는 메서드는 3가지가 있습니다.
# * append: 요소 하나를 추가
# * extend: 리스트를 연결하여 확장
# * insert: 특정 인덱스에 요소 추가
# * slice : 특정 인덱스 사이에 요소 추가

# 객체이름.메서드()
# 함수(인수)

# 22.1.2 리스트에 요소 하나 추가하기

a = [10, 20, 30]
a.append(500)

a = []  # 빈 리스트에 리스트 추가하기
a.append(10)


# 22.1.3 리스트 안에 리스트 추가하기
a = [10, 20, 30]
a.append([500, 600])


# 22.1.4 리스트 확장하기
a = [10, 20, 30]
a.extend([500, 600])


# 22.1.5 리스트의 특정 인덱스에 요소 추가하기
a = [10, 20, 30]
a.insert(2, 500)  # 2번 요소자리에 500을 추가해라

# insert(0, 요소): 리스트의 맨 처음에 요소를 추가
a = [10, 20, 30]
a.insert(0, 500)

# insert(len(리스트), 요소): 리스트 끝에 요소를 추가
a = [10, 20, 30]
a.insert(len(a), 500)
a.insert(-1, 500)  # 맨 끝 바로앞에 요소를 추가

a = [10, 20, 30]
a[1:1] = [500, 600]

# 22.1.6 리스트에서 요소 삭제하기

# * pop: 마지막 요소 또는 특정 인덱스의 요소를 삭제
# * remove: 특정 값을 찾아서 삭제

# 22.1.7 리스트에서 특정 인덱스의 요소를 삭제하기

a = [10, 20, 30]
a.pop()   # 마지막 요소를 삭제한 뒤 삭제한 요소를 반환
a.pop(1)  # 1번 요소의 값을 삭제한 뒤 삭제한 요소를 반환 == del a[1


# 22.1.8 리스트에서 특정 값을 찾아서 삭제하기
a = [10, 20, 30]
a.remove(20)  # 특정 값을 찾아서 삭제한다. a의 요소에서 20을 찾아 삭제

# * stack : Last-in first-out  ----- B W R ----->> B W R ------- >
# * queue : first-in first-out ----- B W R ----->> R W B ------- >


# 22.1.9 리스트에서 특정 값의 인덱스 구하기
a = [10, 20, 30, 15, 20, 40]
a.index(20)  # 같은 값을 구할 경우 가장 작은 인덱스의 요소를 출력한다.


# 22.1.10 특정 값의 개수 구하기
a = [10, 20, 30, 15, 20, 40]
a.count(20)


# 22.1.11 리스트의 순서를 뒤집기
a = [10, 20, 30, 15, 20, 40]
a.reverse()


# 22.1.12 리스트의 요소를 정렬하기
a = [10, 20, 30, 15, 20, 40]
a.sort()


# 22.1.13 리스트의 모든 요소를 삭제하기
a = [10, 20, 30]
a.clear()


# 22.1.4 리스트를 슬라이스로 조작하기
a = [10, 20, 30]
a[len(a):] = [500]  # 리스트 끝에서 요소 추가하기

a = [10, 20, 30]
a[len(a):] = [500, 600]  # extend와 같은 기능


# 참고 : 리스트가 비어 있는지 확인하기

# if not seq:  # 리스트가 비어 있으면 True
# if seq:      # 리스트에 내용이 있으면 True



# 유용한 단축키 Alt+shift+insert 누른 후 편집




# 22.2 리스트와 할당과 복사 알아보기 -----------------------------------------------

a = [0] * 5
b = a   # a와 b 연동

print(a is b)  # a와 b는 같은 객체
print(id(a), id(b))

b[2] = 99

# 리스트 a와 b를 완전히 두 개로 만들려면 copy 메서드로 모든 요소를 복사 해야한다.
a = [0] * 5
b = a.copy()

print(id(a), id(b))  # 다른 객체에 들어가 있음
print(a is b)


# 22.3 반복문으로 리스트의 요소를 모두 출력하기 ---------------------------------------


# 22.3.1 for 반복문으로 요소 출력하기
a = [30, 21, 53, 62, 19]

for element in a:
    print(element, end=' ')


# 22.3.2 인덱스와 요소를 함께 출력하기
a = [30, 21, 53, 62, 19]

# for 인덱스, 요쇼 in enumerate(리스트
for index, element in enumerate(a):
    print(index, element)

for index, element in enumerate(a, start=1):  # 인덱스 숫자를 1부터 출력하기
    print(index, element)


# 22.3.3. while 반복문으로 요소 출력하기
a = [38, 21, 53, 62, 19]
i = 0
while i < len(a):
    print(a[i])
    i += 1


# 22.4 리스트의 가장 작은 수, 가장 큰 수, 합계 구하기 ---------------------------------

# 22.4.1 가장 작은 수와 가장 큰 수 구하기

a = [38, 21, 53, 62, 19]
smallest = a[0]
for i in a:
    if i < smallest:
        smallest = i

print(smallest)


# 22.4.2 요소의 합계 구하기
a = [10] * 5
x = 0

for i in a:
    x += i
print(x)

# 파이썬 스러운 코드
sum(a)



# 22.5 리스트 표현식 사용하기 ----------------------------------------------

# 파이썬의 리스트가 특이한 점은 리스트 안에 for 반복문과 if 조건문을 사용할 수 있다는 점입니다.
# 이렇게 리스트 안에 식, for 반복문, if 조건문 등을 지정하여 리스트를 생성하는 것을
# 리스트 컴프리헨션(list comprehension)이라고 합니다.

# * [식 for 변수 in 리스트]
# * list(식 for 변수 in 리스트)

a = [i for i in range(10)]
print(a)

# 리스트 안에 식, for, 변수, in, 리스트 순서로 들어있지만 뒤에서 앞으로 읽으면 간단합니다.
# 즉, range(10)으로 0부터 9까지 생성하여 변수 i에 숫자를 꺼내고,
# 최종적으로 i를 이용하여 리스트를 만든다는 뜻입니다.

c = [i +5 for i in range(10)]  # 0부터 9까지 숫자를 생성하면서 값에 5를 더하여 리스트 생성
print(c)

d = [i * 2 for i in range(10)]  # 0부터 9까지 숫자를 생성하면서 값에 2를 곱하여 리스트 생성
print(d)

a = [i for i in range(10) if i % 2 == 0]  # 0~9 숫자 중 2의 배수인 숫자(짝수)로 리스트 생성
print(a)

a = [i*i for i in range(10) if i % 2 == 1]
print(a)


# 22.5.2 for반복문과 if조건문을 여러 번 사용하기

e = [i * k for k in range(2, 10)
           for i in range(1, 10)]  # 리스트 표현식에서 for가 여러 개 일때 처리 순서는 뒤 --> 앞
print(e)



# 22.6 리스트에 map 사용하기 ----------------------------------------------------------

# 리스트에 map을 사용해보겠습니다.
# map은 리스트의 요소를 지정된 함수로 처리해주는 함수입니다.
# (map은 원본 리스트를 변경하지 않고 새 리스트를 생성합니다).

# * list(map(함수, 리스트))
# * tuple(map(함수, 튜플))

a = list(map(int, input().split()))
print(a)

a = [1.2, 2.5, 3.7, 4.6]
a = list(map(int, a))
print(a)

# map에는 리스트 뿐만 아니라 모든 반복 가능한 객체를 넣을 수 있다.

a = list(map(str, range(10)))
print(a)


# 22.6.1 input().split()과 map



# 22.7 튜플 응용하기 ----------------------------------------------------------------

# 22.7.1 튜플에서 특정 값의 인덱스 구하기
a = (38, 21, 53, 62, 19, 53)
a.index(53)  # 값이 여러개일 경우 처음 찾은 인덱스를 구한다.


# 22.7.2 특정 값의 개수 구하기
a = (10, 20, 30, 15, 20, 40)
a.count(20)

# 22.7.3 for 반복문으로 요소 출력하기
a = (38, 21, 53, 62, 19)
for element in a:
    print(element, end=' ')

# 22.7.4 튜플 표현식 사용하기
a = tuple(i for i in range(10) if i % 2 == 0)
print(a)

# 참고로 ( )(괄호) 안에 표현식을 넣으면 튜플이 아니라 제너레이터 표현식이 됩니다.
# (제너레이터는 'Unit 40 제너레이터 사용하기'에서 설명하겠습니다)


# 22.7.5 tuple에 map 사용하기
a = (1.2, 2.5, 3.7, 4.6)
a = tuple(map(int, a))
print(a)


# 22.7.6 튜플에서 가장 작은 수, 가장 큰 수, 합계 구하기

a = (38, 21, 53)
print(min(a))
print(max(a))
print(sum(a))

